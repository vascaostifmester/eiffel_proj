var makelove = {

        debug: false,

        endpoint: null,

        log: function (what) {
            if (makelove.debug) {
                console.log(what);
            }
        },

        exists: function (el) {
            if ($(el).length > 0) {
                return true;
            }
        }, 

        init: function () {

            // this.agegate.init();

        }

    } || {};

(function ($, window, undefined) {
    'use strict';

    $(document).ready(function () {
        makelove.init();

        var owl = $("#owl-demo");

        owl.owlCarousel({
            navigation : true,
            singleItem : true,
            navigationText : false,
            mouseDrag :  false,
            autoPlay :   3000,
            stopOnHover : true,
            transitionStyle : "goDown"
        });
    });

})(jQuery, this);
// var agegate = {


//     init: function () {

//         //......

//     }

    

// };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL19zY3JpcHRzL21haW4uanMiLCIuLi9fc2NyaXB0cy9hZ2VnYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQixDQUFDO0FBQ0QsUUFBUSxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN0QixDQUFDO0FBQ0QsUUFBUSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QixDQUFDO0FBQ0QsUUFBUSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsWUFBWSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLGdCQUFnQixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25DLFlBQVksQ0FBQyxDQUFDO0FBQ2QsUUFBUSxFQUFFLENBQUM7QUFDWCxDQUFDO0FBQ0QsUUFBUSxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsWUFBWSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEMsZ0JBQWdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3QixZQUFZLENBQUMsQ0FBQztBQUNkLFFBQVEsRUFBRSxFQUFFO0FBQ1osQ0FBQztBQUNELFFBQVEsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQUNELFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUM7QUFDcEMsQ0FBQztBQUNELFFBQVEsQ0FBQyxDQUFDO0FBQ1YsQ0FBQztBQUNELElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDYixDQUFDO0FBQ0QsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ2xCLENBQUM7QUFDRCxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNwQyxRQUFRLFFBQVEsQ0FBQyxJQUFJLEdBQUcsQ0FBQztBQUN6QixDQUFDO0FBQ0QsUUFBUSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQztBQUNsQyxDQUFDO0FBQ0QsUUFBUSxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDMUIsWUFBWSxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9CLFlBQVksVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvQixZQUFZLGNBQWMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEMsWUFBWSxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ2hDLFlBQVksUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUMvQixZQUFZLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEMsWUFBWSxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdkMsUUFBUSxHQUFHLENBQUM7QUFDWixJQUFJLEdBQUcsQ0FBQztBQUNSLENBQUM7QUFDRCxHQUFHLE1BQU0sQ0FBQyxDQUFDLElBQUksRTtBQzdDZixFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25CLENBQUM7QUFDRCxDQUFDO0FBQ0QsRUFBRSxLQUFLLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNCLENBQUM7QUFDRCxFQUFFLFNBQVMsUUFBUSxDQUFDO0FBQ3BCLENBQUM7QUFDRCxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ1QsQ0FBQztBQUNELEtBQUs7QUFDTCxDQUFDO0FBQ0QsRUFBRSxDQUFDIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFrZWxvdmUgPSB7XHJcblxyXG4gICAgICAgIGRlYnVnOiBmYWxzZSxcclxuXHJcbiAgICAgICAgZW5kcG9pbnQ6IG51bGwsXHJcblxyXG4gICAgICAgIGxvZzogZnVuY3Rpb24gKHdoYXQpIHtcclxuICAgICAgICAgICAgaWYgKG1ha2Vsb3ZlLmRlYnVnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh3aGF0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGV4aXN0czogZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgIGlmICgkKGVsKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIFxyXG5cclxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAvLyB0aGlzLmFnZWdhdGUuaW5pdCgpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfSB8fCB7fTtcclxuXHJcbihmdW5jdGlvbiAoJCwgd2luZG93LCB1bmRlZmluZWQpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbWFrZWxvdmUuaW5pdCgpO1xyXG5cclxuICAgICAgICB2YXIgb3dsID0gJChcIiNvd2wtZGVtb1wiKTtcclxuXHJcbiAgICAgICAgb3dsLm93bENhcm91c2VsKHtcclxuICAgICAgICAgICAgbmF2aWdhdGlvbiA6IHRydWUsXHJcbiAgICAgICAgICAgIHNpbmdsZUl0ZW0gOiB0cnVlLFxyXG4gICAgICAgICAgICBuYXZpZ2F0aW9uVGV4dCA6IGZhbHNlLFxyXG4gICAgICAgICAgICBtb3VzZURyYWcgOiAgZmFsc2UsXHJcbiAgICAgICAgICAgIGF1dG9QbGF5IDogICAzMDAwLFxyXG4gICAgICAgICAgICBzdG9wT25Ib3ZlciA6IHRydWUsXHJcbiAgICAgICAgICAgIHRyYW5zaXRpb25TdHlsZSA6IFwiZ29Eb3duXCJcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxufSkoalF1ZXJ5LCB0aGlzKTsiLCIvLyB2YXIgYWdlZ2F0ZSA9IHtcclxuXHJcblxyXG4vLyAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG5cclxuLy8gICAgICAgICAvLy4uLi4uLlxyXG5cclxuLy8gICAgIH1cclxuXHJcbiAgICBcclxuXHJcbi8vIH07Il19